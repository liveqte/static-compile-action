name: Build PRoot v5.4.0 (static)

on:
  workflow_dispatch:
  push:
      branches: [ main ]
      paths:
        - '.github/workflows/build-proot.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install basic dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git libarchive-dev wget

      - name: Install Python 2.7 for talloc compilation
        run: |
          # 安装 Python 2.7 用于 talloc 编译
          sudo apt-get install -y python2.7
          # 创建 python2 符号链接
          sudo ln -sf /usr/bin/python2.7 /usr/bin/python2 || true

      - name: Install cross-compilation tools (aarch64 only)
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Build and install talloc from source
        run: |
          # 下载并编译 talloc
          wget https://www.samba.org/ftp/talloc/talloc-2.1.7.tar.gz
          tar -zxvf talloc-2.1.7.tar.gz
          cd talloc-2.1.7
          
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            ./configure --prefix=/usr/local
            make
            sudo make install
          else
            # 为 aarch64 交叉编译 talloc
            ./configure --host=aarch64-linux-gnu --prefix=/usr/aarch64-linux-gnu
            make
            sudo make install
          fi
          
          # 更新库缓存
          sudo ldconfig

      - name: Fetch proot v5.4.0 source
        run: |
          git clone --depth=1 --branch v5.4.0 https://github.com/proot-me/proot.git
          echo "SRC_DIR=$PWD/proot" >> $GITHUB_ENV
          mkdir -p bin

      - name: Build PRoot
        run: |
          cd $SRC_DIR/src
          make clean
          
          # 移除 Python 扩展相关文件
          rm -f proot_wrap.c 2>/dev/null || true
          rm -rf extension/python/ 2>/dev/null || true
          
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            # x86_64 构建
            echo "编译 x86_64 版本..."
            make -j$(nproc) LDFLAGS="-static -L/usr/local/lib -ltalloc -larchive" EXTENSIONS=""
            cp proot $GITHUB_WORKSPACE/bin/proot-${{ matrix.arch }}
          else
            # aarch64 构建
            echo "编译 aarch64 版本..."
            export CC="aarch64-linux-gnu-gcc"
            export AR="aarch64-linux-gnu-ar"
            export LD="aarch64-linux-gnu-ld"
            
            # 设置库路径
            export LDFLAGS="-static -L/usr/aarch64-linux-gnu/lib -ltalloc -L/usr/lib/aarch64-linux-gnu -larchive"
            export CFLAGS="-I/usr/aarch64-linux-gnu/include"
            
            make -j$(nproc) EXTENSIONS=""
            cp proot $GITHUB_WORKSPACE/bin/proot-${{ matrix.arch }}
          fi

      - name: Build loader components
        run: |
          cd $SRC_DIR/src
          # 先构建 loader 组件
          make loader.elf loader-m32.elf build.h
          
          # 如果需要，也可以构建 CARE
          make care || echo "CARE 构建失败（可能预期中）"

      - name: Verify binary
        run: |
          echo "验证二进制文件:"
          file $GITHUB_WORKSPACE/bin/proot-${{ matrix.arch }}
          echo "检查静态链接:"
          ldd $GITHUB_WORKSPACE/bin/proot-${{ matrix.arch }} 2>&1 | grep -q "not a dynamic executable" && echo "✓ 静态链接成功" || echo "⚠ 不是静态二进制文件"

      - name: Run tests (optional)
        run: |
          cd $SRC_DIR
          make -C test || echo "测试运行失败（可能预期中）"

      - name: Commit binaries
        run: |
          cd $GITHUB_WORKSPACE
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add bin/
          git commit -m "Add static proot binaries for ${{ matrix.arch }} (built with manual talloc)" || echo "无变化可提交"
          git push || echo "推送失败或无需推送"
